/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tutorial;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Structs can also be exceptions, if they are nasty.
 */
public class InvalidOperation extends Exception implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("InvalidOperation");

  private static final TField WHAT_OP_FIELD_DESC = new TField("whatOp", TType.I32, (short)1);
  private static final TField WHY_FIELD_DESC = new TField("why", TType.STRING, (short)2);

  private int whatOp;
  private String why;

  // isset id assignments
  private static final int __WHATOP_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public InvalidOperation() {
  }

  public InvalidOperation(
    int whatOp,
    String why)
  {
    this();
    this.whatOp = whatOp;
    setWhatOpIsSet(true);
    this.why = why;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InvalidOperation(InvalidOperation other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.whatOp = other.whatOp;
    if (other.isSetWhy()) {
      this.why = other.why;
    }
  }

  public InvalidOperation deepCopy() {
    return new InvalidOperation(this);
  }

  public void clear() {
    setWhatOpIsSet(false);
    this.whatOp = 0;
    this.why = null;
  }

  public int getWhatOp() {
    return this.whatOp;
  }

  public void setWhatOp(int whatOp) {
    this.whatOp = whatOp;
    setWhatOpIsSet(true);
  }

  public void unsetWhatOp() {
    __isset_vector[__WHATOP_ISSET_ID] = false;
  }

  /** Returns true if field whatOp is set (has been assigned a value) and false otherwise */
  public boolean isSetWhatOp() {
    return __isset_vector[__WHATOP_ISSET_ID];
  }

  public void setWhatOpIsSet(boolean value) {
    __isset_vector[__WHATOP_ISSET_ID] = value;
  }

  public String getWhy() {
    return this.why;
  }

  public void setWhy(String why) {
    this.why = why;
  }

  public void unsetWhy() {
    this.why = null;
  }

  /** Returns true if field why is set (has been assigned a value) and false otherwise */
  public boolean isSetWhy() {
    return this.why != null;
  }

  public void setWhyIsSet(boolean value) {
    if (!value) {
      this.why = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InvalidOperation)
      return this.equals((InvalidOperation)that);
    return false;
  }

  public boolean equals(InvalidOperation that) {
    if (that == null)
      return false;

    boolean this_present_whatOp = true;
    boolean that_present_whatOp = true;
    if (this_present_whatOp || that_present_whatOp) {
      if (!(this_present_whatOp && that_present_whatOp))
        return false;
      if (this.whatOp != that.whatOp)
        return false;
    }

    boolean this_present_why = true && this.isSetWhy();
    boolean that_present_why = true && that.isSetWhy();
    if (this_present_why || that_present_why) {
      if (!(this_present_why && that_present_why))
        return false;
      if (!this.why.equals(that.why))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    InvalidOperation other = (InvalidOperation)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetWhatOp(), other.isSetWhatOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhatOp()) {
      lastComparison = TBaseHelper.compareTo(this.whatOp, other.whatOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetWhy(), other.isSetWhy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhy()) {
      lastComparison = TBaseHelper.compareTo(this.why, other.why);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHAT_OP
          if (field.type == TType.I32) {
            this.whatOp = iprot.readI32();
            setWhatOpIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // WHY
          if (field.type == TType.STRING) {
            this.why = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(WHAT_OP_FIELD_DESC);
    oprot.writeI32(this.whatOp);
    oprot.writeFieldEnd();
    if (this.why != null) {
      oprot.writeFieldBegin(WHY_FIELD_DESC);
      oprot.writeString(this.why);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("InvalidOperation(");
    boolean first = true;

    sb.append("whatOp:");
    sb.append(this.whatOp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("why:");
    if (this.why == null) {
      sb.append("null");
    } else {
      sb.append(this.why);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

